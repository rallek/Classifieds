application Classifieds {
	documentation "With classifieds you can manage your own market."
	vendor Rallek
	author "Ralf Koester"
	email "ralf@familie-koester.de"
	url "http://support.zikula.de"
	version "0.2.5"
	prefix clfs
	modelPath ""
	targetCoreVersion ZK135
	modelLayer {
		modelContainer Model {
			numExampleRows 0
			entities {
				entity classified leading categorisable categorisableMultiSelection {
					documentation "a module for goods you want to sell or you want to buy like a small version of ebay"
					nameMultiple classifieds
					workflow NONE
					hasArchive true
					hasTray true
					ownerPermission true
					fields {
						string title leading {
							defaultValue ""
						},
						list kind  {
							items {
								default listItem offer ( offer ),
								listItem search ( search ),
								listItem exchange ( exchange )
							}
						},
						text description {
							documentation "the description of your offer or what you are looking for"
							defaultValue ""
						},
						decimal price  currency {
							documentation "The price you are willing to pay or what you want to get for your offer"
							defaultValue ""
							mandatory false
						},
						email ^email {
							documentation "the contact to your classified"
							mandatory true
						},
						string fon {
							documentation "your phone number for requests. It will be shown public."
							defaultValue ""
							mandatory false
						},
						upload picture {
							documentation "a picture oft your classified"
							defaultValue ""
							mandatory false
							subFolderName clsf_pict
							allowedFileSize 102400
						},
						upload picture2 {
							documentation "you can add another picture"
							mandatory false
						},
						datetime classifiedStart  startDate {
							documentation "the date when your classified should appear. Normaly right now."
							defaultValue now
							mandatory false
							timestampable CREATE
						},
						datetime classifiedEnd  future endDate {
							documentation "the date when the classified shoud stop. This will be set automatically."
							defaultValue ""
						},
						boolean terms ajaxTogglability {
							documentation "You have to accept the terms and conditions. Otherwhise your classified will not published."
							defaultValue ^false
						}
					}
				}
			}
			variables {
				varContainer Variables {
					vars {
						intVar defaultPeriod {
							documentation "Standardtage f√ºr die Laufzeit der Kleinanzeige"
							value "60"
						},
						textVar termsLink {
							documentation "here we need a link to the terms and conditions"
							value "index.php"
							maxLength 255
						},
						intVar pictureFileSize {
							documentation "the maximum filesize of the uploaded pictures (in byte, e.g. 102400 for 100kb)"
							value "204800"
						},
						textVar allowedExtension {
							value "gif, jpeg, jpg, png"
						},
						intVar pictureHight {
							documentation "maximal hight of the picture"
							value "200"
						},
						intVar pictureWidth {
							documentation "maximal width of the picture"
							value "200"
						},
						intVar thumbPictureHight {
							documentation "maximal hight of the picture thumbnail"
							value "64"
						},
						intVar thumbPictureWidth {
							documentation "maximal width of the picture thumbnail"
							value "64"
						},
						filePathVar pictureDummy {
							documentation "a dummy picture if the user is not uploading one"
						},
						boolVar useWatermark {
							documentation "you can use the wartermark option for pictures"
							value ^false
						},
						listVar typWatermark {
							documentation "choose the kind of watermark"
							value ^text
							items {
								listVarItem default ^text,
								listVarItem picture
							}
						},
						filePathVar watermarkPicture {
							documentation "the picture for the overlay as a watermark"
							value "/images/watermark.jpg"
						},
						textVar textWatermark {
							documentation "text for watermarking (max 15 characters)"
							maxLength 15
						}
					}
				}
			}
		}
	}
	controllerLayer {
		controllerContainer Controller {
			modelContext ( "Classifieds.Model" )
			processViews "Classifieds.View"
			controllers {
				adminController Admin {
					actions {
						mainAction Main,
						displayAction Display,
						viewAction View,
						deleteAction Delete
					}
				},
				ajaxController Ajax {
					actions {
						mainAction Main,
						displayAction Display
					}
				},
				userController User {
					actions {
						mainAction Main,
						viewAction View,
						displayAction Display,
						editAction Edit
					}
				}
			}
		}
	}
	viewLayer {
		viewContainer View {
			documentation "View geht noch nicht"
			controller "Classifieds.Controller"
		}
	}
}